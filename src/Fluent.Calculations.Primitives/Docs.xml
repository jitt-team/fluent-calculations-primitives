<?xml version="1.0" encoding="utf-8" ?>
<IntelliSense>
	<EvaluationScopeGeneric>
		<class>
			<summary>
				Base class for implementing a calculation.
			</summary>
			<remarks>
				<para>
					Use this class to define, run and retrieve a result of your calculations.
				</para>
				<list type="table">
					<item>
						<term>Calculation</term>
						<description>
							<para></para>
							Class inheriting from EvaluationScope<![CDATA[<T>]]> is logical unit to compute desired result. It will containt lambda expressions,<br/>
							input parameters or constants of types derived from <see cref="Value"/> or <see cref="IValue"/>.
						</description>
					</item>
					<item>
						<term>Examples</term>
						<description>
							<para>See below a class inheriting from EvaluationScope<![CDATA[<T>]]>, where T is a result class type.</para>
							<code>
								public class ExampleCalculation : EvaluationScope<![CDATA[<Number>]]>
								{
								public ExampleCalculation() : base(new EvaluationOptions { AlwaysReadNamesFromExpressions = true }) { }
								public override Number Return() => Number.Of(0);
								}
							</code>
						</description>
					</item>
					<item>
						<a href="https://github.com/jitt-team/fluent-calculations-primitives/wiki/">
							Learn more
						</a>
					</item>
				</list>
			</remarks>
			<typeparam name="T">Type of the result value class</typeparam>
		</class>
		<ctor>
			<summary>
				Initializes a new instance of the <see cref="EvaluationScope{T}"/>.
			</summary>
			<remarks>TBD</remarks>
		</ctor>
		<ctor-options>
			<summary>
				Initializes a new instance of the <see cref="EvaluationScope{T}"/> class with custom options.
			</summary>
			<remarks>TBD</remarks>
			<param name="options">Options to be used to run the calculation</param>
		</ctor-options>
		<ctor-func>
			<summary>
				Initializes a new instance of the <see cref="EvaluationScope{T}"/> class with standalone labda expression.
			</summary>
			<remarks>TBD</remarks>
			<param name="func">
				Lambda expression using <see cref="IValue"/> types
			</param>
		</ctor-func>
		<method-ToResult>
			<summary>
				Exit method to return result from inherited calculation
			</summary>
			<remarks>TBD</remarks>
			<returns>Calculation result</returns>
		</method-ToResult>
		<Return>
			<summary>TBD</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</Return>
	</EvaluationScopeGeneric>
	<IEvaluationScopeGeneric>
		<interface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
		</interface>
		<ToResult>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</ToResult>
	</IEvaluationScopeGeneric>
	<EvaluationScope>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Evaluate>
			<summary>Evaluates an expression and captures it's arguments.</summary>
			<remarks>TBD</remarks>
			<typeparam name="TValue">Result value type</typeparam>
			<param name="lambdaExpression">Math or logic expression</param>
			<param name="name">Result name (captured by the compiler by default)</param>
			<param name="lambdaExpressionBody">Expression body (captured by the compiler by default)</param>
			<returns>Lambda expression result containing arguments and expression body.</returns>
		</Evaluate>
		<Evaluate-switch>
			<summary>TBD</summary>
			<remarks>TBD</remarks>
			<typeparam name="TCase">TBD</typeparam>
			<typeparam name="TValue">TBD</typeparam>
			<param name="getResultEvaluatorFunc">TBD</param>
			<param name="name">TBD</param>
			<returns>TBD</returns>
		</Evaluate-switch>
		<ClearCache>
			<summary>TBD</summary>
			<remarks>TBD</remarks>
		</ClearCache>
		<Create>
			<summary>TBD</summary>
			<remarks>TBD</remarks>
			<param name="scope">TBD</param>
			<returns>TBD</returns>
		</Create>
	</EvaluationScope>
	<IEvaluationScope>
		<interface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</interface>
		<Evaluate>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="TValue">TBD</typeparam>
			<param name="lambdaExpression">TBD</param>
			<param name="name">TBD</param>
			<param name="lambdaExpressionBody">TBD</param>
			<returns></returns>
		</Evaluate>
		<Evaluate-switch>
			<summary>TBD</summary>
			<remarks>TBD</remarks>
			<typeparam name="TCase">TBD</typeparam>
			<typeparam name="TValue">TBD</typeparam>
			<param name="getResultEvaluatorFunc">TBD</param>
			<param name="name">TBD</param>
			<returns></returns>
		</Evaluate-switch>
	</IEvaluationScope>
	<Scope>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<CreateHere>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="obj">TBD</param>
			<param name="scope">TBD</param>
			<returns>TBD</returns>
		</CreateHere>
	</Scope>
	<Result>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Of>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Of>
		<OfWithScope>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</OfWithScope>
	</Result>
	<EvaluationOptions>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Default>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Default>
		<AlwaysReadNamesFromExpressions>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</AlwaysReadNamesFromExpressions>
		<Scope>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Scope>
	</EvaluationOptions>
	<Value>
		<class>
			<summary>Base building block for domain specific numer-like types, Number and Condition are examples</summary>
			<remarks>TBD</remarks>
		</class>
		<Name>
			<summary>Name of the variable</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Name>
		<Expression>
			<summary>Expression that was used to calculate or define the value</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Expression>
		<Primitive>
			<summary>.NET primitive representation of the value</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Primitive>
		<PrimitiveString>
			<summary>.NET primitive representation of the value</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</PrimitiveString>
		<Origin>
			<summary>Origin type of the value</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Origin>
		<Tags>
			<summary>Custom tags associated with the value</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Tags>
		<Scope>
			<summary>Custom tags associated with the value</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Scope>
		<Type>
			<summary>TBD</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Type>
		<ctor-value>
			<summary>
				Initializes a new instance of the <see cref="Value"/> which is deep copy of the supplied value parameter.
			</summary>
			<remarks>TBD</remarks>
			<param name="value">Value to copy</param>
		</ctor-value>
		<ctor-args>
			<summary>
				Initializes a new instance of the <see cref="Value"/> with provided values. Used in derived classes to initialize base class fields.
			</summary>
			<remarks>TBD</remarks>
			<param name="createValueArgs">Arguments to create a new value</param>
		</ctor-args>
		<MakeOfThisType>
			<summary>
				Initializes a new instance of the derived value class. Used by the framework to create expected result types.
			</summary>
			<remarks>TBD</remarks>
			<param name="args">Arguments to create a new value</param>
			<returns></returns>
		</MakeOfThisType>
		<MakeDefault>
			<summary>
				Initializes a new instance with default values, equivalent to zero/null value.
			</summary>
			<remarks>TBD</remarks>
			<returns>Instance of zero value</returns>
		</MakeDefault>
		<HandleBinaryOperation>
			<summary>
				Handles math and comparison operations of underlying primitve values in derived types.
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="ResultType">Operation result type</typeparam>
			<typeparam name="ResultPrimitiveType">.NET primitive value type (ex. decimal, boolean)</typeparam>
			<param name="right">Right side value of operatoin</param>
			<param name="expressionFunc">Expression representing operation in derived type</param>
			<param name="operatorName">Operation name (ex. Add, Substract, LessThan)</param>
			<returns>Result value of defined type containg input values as arguments</returns>
		</HandleBinaryOperation>
		<Equals-value>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
			<returns>TBD</returns>
		</Equals-value>
		<Equals-obj>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="obj">TBD</param>
			<returns>TBD</returns>
		</Equals-obj>
		<GetHashCode>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</GetHashCode>
		<ToString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</ToString>
	</Value>
	<IValue>
		<interface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</interface>
		<Name>
			<summary>Name of the variable</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Name>
		<Expression>
			<summary>Expression that was used to calculate or define the value</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Expression>
		<Primitive>
			<summary>.NET primitive representation of the value</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Primitive>
		<PrimitiveString>
			<summary>.NET primitive representation of the value</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</PrimitiveString>
		<Origin>
			<summary>Origin type of the value</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Origin>
		<Tags>
			<summary>Custom tags associated with the value</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Tags>
		<Type>
			<summary>TBD</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Type>
		<Scope>
			<summary>TBD</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Scope>
	</IValue>
	<ValueOriginType>
		<enum>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</enum>
		<NaN>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</NaN>
		<Parameter>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Parameter>
		<Constant>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Constant>
		<Evaluation>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Evaluation>
		<Operation>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Operation>
		<Result>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Result>
	</ValueOriginType>
	<MakeValueArgs>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Name>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Name>
		<Expression>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Expression>
		<PrimitiveValue>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</PrimitiveValue>
		<Origin>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Origin>
		<Arguments>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Arguments>
		<Tags>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Tags>
		<Scope>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Scope>
		<WithTags>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="tags">TBD</param>
			<returns>TBD</returns>
		</WithTags>
	</MakeValueArgs>
	<ExpressionNode>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<ctor>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ctor>
		<ToString>
			<summary>
				TBD
			</summary>
		</ToString>
		<Body>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Body>
		<Type>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Type>
		<Arguments>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Arguments>
		<WithArguments>
			<summary>
				TBD
			</summary>
			<param name="first">TBD</param>
			<param name="other">TBD</param>
			<returns>TBD</returns>
		</WithArguments>
		<WithArguments-enumerable>
			<summary>
				TBD
			</summary>
			<param name="arguments">TBD</param>
			<returns>TBD</returns>
		</WithArguments-enumerable>
	</ExpressionNode>
	<ExpressionNodeType>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<None>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</None>
		<Constant>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Constant>
		<Collection>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Collection>
		<Lambda>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Lambda>
		<Switch>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Switch>
		<Binary>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Binary>
		<Math>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Math>
	</ExpressionNodeType>
	<IExpression>
		<interface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</interface>
		<Arguments>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Arguments>
		<Body>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Body>
		<Type>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Type>
	</IExpression>
	<ArgumentsCollection>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Count>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Count>
		<GetEnumerator>
			<summary>
				TBD
			</summary>
			<returns>
				TBD
			</returns>
		</GetEnumerator>
	</ArgumentsCollection>
	<IArguments>
		<inteface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</inteface>
		<Count>
			<summary>
				TBD
			</summary>
			<value>TBD</value>
			<remarks>TBD</remarks>
		</Count>
	</IArguments>
	<ArgumentsDebugView>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="arguments">TBD</param>
		</class>
		<Arguments>
			<summary>
				TBD
			</summary>
		</Arguments>
	</ArgumentsDebugView>
	<ArgumentsVisitorInvoker>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<VisitArguments>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
			<param name="visitor">TBD</param>
			<returns>TBD</returns>
		</VisitArguments>
	</ArgumentsVisitorInvoker>
	<Tag>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Name>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Name>
		<ToString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</ToString>
		<Create>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="name">
				TBD
			</param>
		</Create>
	</Tag>
	<ITags>
		<inteface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</inteface>
	</ITags>
	<TagsCollection>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Count>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Count>
		<GetEnumerator>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</GetEnumerator>
	</TagsCollection>
	<ValueVisitor>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<ctor-value>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
		</ctor-value>
		<VisitArgument>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
		</VisitArgument>
	</ValueVisitor>
	<IValueProvider>
		<inteface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</inteface>
		<MakeDefault>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</MakeDefault>
		<MakeOfThisType>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="args">TBD</param>
			<returns>TBD</returns>
		</MakeOfThisType>
		<Accept>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="visitor">TBD</param>
			<returns>TBD</returns>
		</Accept>
	</IValueProvider>
	<Values>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Name>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Name>
		<Primitive>
			<summary>
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Primitive>
		<Origin>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Origin>
		<Expression>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Expression>
		<Tags>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Tags>
		<Scope>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Scope>
		<Type>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Type>
		<PrimitiveString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</PrimitiveString>
		<Accept>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</Accept>
		<Count>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Count>
		<MakeOfThisType>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="args">TBD</param>
			<returns>TBD</returns>
		</MakeOfThisType>
		<MakeOfThisElementType>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="args">TBD</param>
			<returns>TBD</returns>
		</MakeOfThisElementType>
		<MakeDefault>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</MakeDefault>
		<ToString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ToString>
		<Add>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
			<param name="fieldName">TBD</param>
		</Add>
	</Values>
	<IValuesProvider>
		<inteface>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</inteface>
		<MakeOfThisElementType>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="args">TBD</param>
			<returns>TBD</returns>
		</MakeOfThisElementType>
	</IValuesProvider>
	<ValuesDebugView>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<ctor>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="collectionValue">TBD</param>
		</ctor>
		<Items>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<value>TBD</value>
		</Items>
	</ValuesDebugView>
	<ValuesLinqMathExtensions>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Sum>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="source">TBD</param>
			<returns>TBD</returns>
		</Sum>
		<Average>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="source">TBD</param>
			<returns>TBD</returns>
		</Average>
		<Min>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="source">TBD</param>
			<returns>TBD</returns>
		</Min>
		<Max>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="source">TBD</param>
			<returns>TBD</returns>
		</Max>
	</ValuesLinqMathExtensions>
	<Number>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<ctor>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ctor>
		<ToString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ToString>
	</Number>
	<Condition>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<ctor>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ctor>
		<ctor-makeValueArgs>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="makeValueArgs">TBD</param>
		</ctor-makeValueArgs>
		<PrimitiveString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</PrimitiveString>
		<ToString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</ToString>
		<IsTrue>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</IsTrue>
		<MakeDefault>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</MakeDefault>
		<implicit_Bool>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
			<returns>TBD</returns>
		</implicit_Bool>
		<implicit_Condition>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="condition">TBD</param>
			<returns>TBD</returns>
		</implicit_Condition>
		<op_True>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="condition">TBD</param>
			<returns>TBD</returns>
		</op_True>
		<op_False>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="condition">TBD</param>
			<returns>TBD</returns>
		</op_False>
		<True>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="expressionName">TBD</param>
			<returns>TBD</returns>
		</True>
		<False>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="expressionName">TBD</param>
			<returns>TBD</returns>
		</False>
		<True-scope>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="scope">TBD</param>
			<param name="expressionName">TBD</param>
			<returns>TBD</returns>
		</True-scope>
		<False-scope>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="scope">TBD</param>
			<param name="expressionName">TBD</param>
			<returns>TBD</returns>
		</False-scope>
		<MakeOfThisType>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="args">TBD</param>
			<returns>TBD</returns>
		</MakeOfThisType>
		<Equals>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="obj">TBD</param>
			<returns>TBD</returns>
		</Equals>
		<GetHashCode>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<returns>TBD</returns>
		</GetHashCode>
		<op_And>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="left">TBD</param>
			<param name="right">TBD</param>
			<returns>TBD</returns>
		</op_And>
		<op_Or>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="left">TBD</param>
			<param name="right">TBD</param>
			<returns>TBD</returns>
		</op_Or>
		<op_Equal>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="left">TBD</param>
			<param name="right">TBD</param>
			<returns>TBD</returns>
		</op_Equal>
		<op_NotEqual>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="left">TBD</param>
			<param name="right">TBD</param>
			<returns>TBD</returns>
		</op_NotEqual>
		<op_ExlusiveOr>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="left">TBD</param>
			<param name="right">TBD</param>
			<returns>TBD</returns>
		</op_ExlusiveOr>
		<op_OnesComplement>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
			<returns>TBD</returns>
		</op_OnesComplement>
	</Condition>
	<Option>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T"></typeparam>
		</class>
		<ctor>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ctor>
		<ctor-option>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ctor-option>
		<ctor-makeValueArgs>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</ctor-makeValueArgs>
		<implicit-option>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</implicit-option>
		<implicit-T>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</implicit-T>
		<MakeOfThisType>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</MakeOfThisType>
		<MakeDefault>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</MakeDefault>
		<Equals>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</Equals>
		<GetHashCode>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</GetHashCode>
		<PrimitiveString>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</PrimitiveString>
		<operator-equal>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</operator-equal>
		<operator-not-equal>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</operator-not-equal>
	</Option>
	<Option-static>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Of>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="TEnum">TBD</typeparam>
			<param name="primitiveValue">TBD</param>
			<param name="fieldName">TBD</param>
			<returns>TBD</returns>
		</Of>
	</Option-static>
	<ValueMath>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Abs>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<param name="value">TBD</param>
			<returns>TBD</returns>
		</Abs>
		<Ceiling>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<param name="value">TBD</param>
			<returns>TBD</returns>
		</Ceiling>
		<Floor>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<param name="value">TBD</param>
			<returns>TBD</returns>
		</Floor>
		<Truncate>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<param name="value">TBD</param>
			<returns>TBD</returns>
		</Truncate>
		<Min>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<param name="left">TBD</param>
			<param name="right">TBD</param>
			<returns>TBD</returns>
		</Min>
		<Max>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<param name="left">TBD</param>
			<param name="right">TBD</param>
			<returns>TBD</returns>
		</Max>
		<Round>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<param name="d">TBD</param>
			<param name="decimals">TBD</param>
			<returns>TBD</returns>
		</Round>
	</ValueMath>
	<NullExpressionResultException>
		<exception>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</exception>
		<ctor>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="expressionBody">TBD</param>
		</ctor>
	</NullExpressionResultException>
	<SwitchExpression>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<typeparam name="T">TBD</typeparam>
			<typeparam name="TReturn">TBD</typeparam>
		</class>
		<For>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="checkValue">TBD</param>
			<returns>TBD</returns>
		</For>
		<SwitchBuilder>
			<class>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
			</class>
			<Case>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
				<param name="caseValue">TBD</param>
				<param name="otherCaseValues">TBD</param>
				<returns>TBD</returns>
			</Case>
		</SwitchBuilder>
		<ReturnBuilder>
			<class>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
			</class>
			<Return-primitiveValue>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
				<param name="primitiveValue">TBD</param>
				<param name="valueBody">TBD</param>
				<returns>TBD</returns>
			</Return-primitiveValue>
			<Return-returnValueFunc>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
				<param name="returnValueFunc">TBD</param>
				<param name="funcBody">TBD</param>
				<returns>TBD</returns>
			</Return-returnValueFunc>
			<Return>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
				<param name="returnValue">TBD</param>
				<returns>TBD</returns>
			</Return>
		</ReturnBuilder>
		<CaseBuilder>
			<class>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
			</class>
			<Case>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
				<param name="caseValue">TBD</param>
				<param name="otherCaseValues">TBD</param>
				<returns>TBD</returns>
			</Case>
			<Default-primitiveValue>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
				<param name="primitiveValue">TBD</param>
				<param name="valueBody">TBD</param>
				<returns>TBD</returns>
			</Default-primitiveValue>
			<Default-defaultValueFun>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
				<param name="defaultValueFun">TBD</param>
				<param name="funcBody">TBD</param>
				<returns>TBD</returns>
			</Default-defaultValueFun>
		</CaseBuilder>
		<ResultEvaluator>
			<class>
				<summary>
					TBD
				</summary>
				<remarks>TBD</remarks>
			</class>
		</ResultEvaluator>
	</SwitchExpression>
	<ValueJsonConverter>
		<class>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
		</class>
		<Serialize>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="value">TBD</param>
			<param name="writeIndented">TBD</param>
			<returns>TBD</returns>
		</Serialize>
		<Deserialize>
			<summary>
				TBD
			</summary>
			<remarks>TBD</remarks>
			<param name="json">TBD</param>
			<returns>TBD</returns>
		</Deserialize>
	</ValueJsonConverter>
</IntelliSense>