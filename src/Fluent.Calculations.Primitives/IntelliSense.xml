<?xml version="1.0" encoding="utf-8" ?>
<docs>
	<members name="EvaluationContext">
		<class>
			<summary>
				Base class for implementing a calculation.
			</summary>
			<remarks>
				<para>
					Use this class to define, run and retrieve a result of your calculations.
				</para>
				<list type="table">
					<item>
						<term>Calculation</term>
						<description>
							<para></para>
							Calculation is a logical compostion of lambda expressions implement operations with input parameters or <br/>
							of types derived from <see cref="Value"/> or implementing <see cref="IValue"/> interface that ouputs single value as a result.
						</description>
					</item>
					<item>
						<term>Examples</term>
						<description>
							<para>See below a class inheriting from EvaluationContext<![CDATA[<T>]]>, where T is a result class type.</para>
							<code>
public class ExampleCalculation : EvaluationContext<![CDATA[<Number>]]>
{
	public ExampleCalculation() : base(new EvaluationOptions { AlwaysReadNamesFromExpressions = true }) { }
	public override Number Return() => Number.Of(0);
}
							</code>
						</description>
					</item>
					<item>
						<a href="https://github.com/jitt-team/fluent-calculations-primitives/wiki/">
							Learn more
						</a>
					</item>
				</list>
			</remarks>
			<typeparam name="T">Type of the result value class</typeparam>
		</class>
		<ctor>
			<summary>
				Initializes a new instance of the <see cref="EvaluationContext{T}"/>.
			</summary>
		</ctor>
		<ctor-options>
			<summary>
				Initializes a new instance of the <see cref="EvaluationContext{T}"/> class with custom options.
			</summary>
			<param name="options">Options to be used to run the calculation</param>
		</ctor-options>
		<ctor-func>
			<summary>
				Initializes a new instance of the <see cref="EvaluationContext{T}"/> class with standalone labda expression.
			</summary>
			<param name="func">
				Lambda expression using <see cref="IValue"/> types
			</param>
		</ctor-func>
		<method-ToResult>
			<summary>
				Exit method to return result from inherited calculation
			</summary>
			<returns>Calculation result</returns>
		</method-ToResult>
		<method-Evaluate>
			<summary>Evaluates an expression and captures arguments.</summary>
			<typeparam name="TValue">Result value type</typeparam>
			<param name="lambdaExpression">Math or logic expression</param>
			<param name="name">Result name (captured by the compiler by default)</param>
			<param name="lambdaExpressionBody">Expression body (captured by the compiler by default)</param>
			<returns>Lambda expression result containing arguments and expression body.</returns>
		</method-Evaluate>
	</members>
	<members name="Value">
		<class>
			<summary>TBD</summary>
		</class>
		<prop-name>
			<summary>TBD</summary>
		</prop-name>
		<prop-expression>
			<summary>TBD</summary>
		</prop-expression>
		<prop-primitive>
			<summary>TBD</summary>
		</prop-primitive>
		<prop-origin>
			<summary>TBD</summary>
		</prop-origin>
		<prop-tags>
			<summary>TBD</summary>
		</prop-tags>
		<ctor-value>
			<summary>
				TBD
			</summary>
			<param name="value">TBD</param>
		</ctor-value>
		<ctor-args>
			<summary>
				TBD
			</summary>
			<param name="createValueArgs">TBD</param>
		</ctor-args>
		<method-make>
			<summary>
				TBD
			</summary>
			<param name="args">TBD</param>
			<returns></returns>
		</method-make>
		<method-getdefault>
			<summary>
				TBD
			</summary>
			<returns>TBD</returns>
		</method-getdefault>
		<method-handlebinaryexpression>
			<summary>
				TBD
			</summary>
			<typeparam name="ResultType">TBD</typeparam>
			<typeparam name="ResultPrimitiveType">TBD</typeparam>
			<param name="right">TBD</param>
			<param name="expressionFunc">TBD</param>
			<param name="operatorName">TBD</param>
			<returns>TBD</returns>
		</method-handlebinaryexpression>
		<method-equals-value>
			 <summary>
				 TBD
			</summary>
			 <param name="value">TBD</param>
			 <returns>TBD</returns>
		</method-equals-value>
		<method-equals-object>
			<summary>
				TBD
			</summary>
			<param name="obj">TBD</param>
			<returns>TBD</returns>
		</method-equals-object>
		<method-gethashcode>
			<summary>
				TBD
			</summary>
			<returns>TBD</returns>
		</method-gethashcode>
		<method-tostring>
			<summary>
				TBD
			</summary>
			<returns>TBD</returns>
		</method-tostring>
		<method-valuetostring>
			<summary>
				TBD
			</summary>
			<returns>TBD</returns>
		</method-valuetostring>
	</members>
</docs>