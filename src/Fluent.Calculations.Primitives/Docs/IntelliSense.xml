<?xml version="1.0" encoding="utf-8" ?>
<docs>
	<members name="EvaluationContext">
		<class>
			<summary>
				Base class for implementing calculations and hold the calculation context.
			</summary>
			<remarks>
				<para>
					It is a main entry point that provides all tracing capabilities and<br/>
					all the required state during calculation execution.<br/>
					When inherited, the derived class can also provide an interface to pass in<br/>
					all needed calculation inputs, it  can also contain all required constants.
				</para>
				<list type="table">
					<item>
						<term>Summary</term>
						<description>This should provide a one sentence summary of the class or member.</description>
					</item>
					<item>
						<term>c, cref, see, seealso</term>
						<description>
							These provide code style and links to other
							documentation elements
						</description>
					</item>
					<item>
						<term>Inheritance</term>
						<description>
							<code>
								public class ExampleCalculation : EvaluationContext<![CDATA[<Number>]]>{
								public ExampleCalculation() : base(new EvaluationOptions { AlwaysReadNamesFromExpressions = true }) { }
								public override Number Return() => Number.Of(0);
								}
							</code>
						</description>
					</item>
				</list>
				<item>
					More information:
					<para></para>
					<a href="https://github.com/jitt-team/fluent-calculations-primitives/wiki/">
						Fluent.Calculations Wiki
					</a>
				</item>
				<para>
					The list above uses the "table" style. You could
					also use the "bullet" or "number" style. Neither
					would typically use the "term" element.
					<br/>
					Note: paragraphs are double spaced. Use the *br*
					tag for single spaced lines.
				</para>
			</remarks>
			<typeparam name="ResultValueType">Type of calculation result</typeparam>
		</class>
		<ctor-options>
			<summary>
				Creates an instance
			</summary>
			<param name="options">Context options</param>
		</ctor-options>
		<ctor-func>
			<summary>
				Creates an instance
			</summary>
			<param name="func">Calculation function</param>
		</ctor-func>
		<method-ToResult>
			<summary>
				Exit method to return result from inherited calculation
			</summary>
			<returns>Calculation result</returns>
		</method-ToResult>
		<method-Evaluate>
			<summary>Summary</summary>
			<typeparam name="ValueType">A</typeparam>
			<param name="lambdaExpression">A</param>
			<param name="name">A</param>
			<param name="lambdaExpressionBody">A</param>
			<returns>Labda expression result</returns>
		</method-Evaluate>
	</members>
	<members name="Value">
		<class>
			
		</class>
	</members>
</docs>